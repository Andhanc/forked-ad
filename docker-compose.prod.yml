services:
  db:
    image: ankane/pgvector
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # ВАЖНО: Порт НЕ открыт наружу (только внутри Docker сети)
    expose:
      - "5432"
    volumes:
      - pgvector_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    restart: always
    # ВАЖНО: Порт НЕ открыт наружу
    expose:
      - "6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: django_web
    command: gunicorn Folder.app.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120 --chdir /app/Folder
    # ВАЖНО: НЕ монтируем код в production
    volumes:
      - media_files:/app/Folder/media
      - static_files:/app/Folder/staticfiles
    # ВАЖНО: Порт НЕ открыт наружу (только для nginx)
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app/Folder
      PYTHONUNBUFFERED: "1"
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "False"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    networks:
      - backend
      - frontend
    restart: always

  celery:
    build: .
    container_name: celery_worker
    command: celery -A Folder.app worker --loglevel=info --concurrency=4
    volumes:
      - media_files:/app/Folder/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PYTHONPATH: /app/Folder
      PYTHONUNBUFFERED: "1"
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "False"
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    networks:
      - backend
    restart: always

  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
    depends_on:
      - web
    networks:
      - frontend

volumes:
  pgvector_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

