СТРУКТУРА GIT
Git – распределенная система контроля версий. Git представляет собой серверную часть, которая отвечает за версионное хранение документов и обработку запросов, клиентскую часть, позволяющую формировать запросы к серверу Git и набора конфигурационных файлов, хранящих настройки пользователя и позволяющих адаптировать Git для самых разных задач.
Git состоит из набора консольных утилит и файла конфигурации. За счет такой архитектуры достигается переносимость на разные платформы и позволяет создавать графические клиенты для работы с проектами.
Структура репозитория (отдельного проекта) Git представляет собой каталог файловой системы, в котором хранятся конфигурационные файлы, журналы — файлы изменений репозитория, файлы индексов, ускоряющие поиск по репозиторию и файлы проекта. Дерево файлов в репозитории не отражает реальное хранение файлов, так как Git изменяет расположение файлов для ускорения доступа. Если при работе с проектом файл изменяется, то в репозитории Git создается новый файл. Таким образом при изменения Git не изменяет старые файлы, а создает новые. Пользователь же видит «снимок» файловой системы на определенный момент времени (под снимком здесь понимается информация на определенный период времени, т. е. Информация созданная до запрашиваемого периода и измененная после этого периода). Из репозитария файлы не удаляются. Они могут быть лишь помечены как удаленные.
По умолчанию конфигурация репозитория хранится в каталоге “.git”, корневого каталога проекта. Таким образом достаточно легко превратить любой каталог в репозиторий или импортировать существующий репозиторий вызвав соответствующую утилиту, которая создаст подкаталог с необходимыми файлами или исправит существующие файлы в случае импорта.
Для каждого объекта в репозитории считается SHA-1 хеш, и именно он становится именем файла, содержащего данный объект в директории .git/objects. Для оптимизации работы с файловыми системами, не использующими деревья для директорий, первый байт хэша становится именем поддиректории, а остальные — именем файла в ней, что снижает количество файлов в одной директории
В классическом обычном сценарии в репозитории git есть три типа объектов — файл, дерево и коммит. Файл есть какая-то версия какого-то пользовательского файла, дерево — совокупность файлов из разных поддиректорий, коммит — дерево + некая дополнительная информация (например, родительский(е) коммит(ы), а также комментарий).
В репозитории иногда производится сборка мусора, во время которой устаревшие файлы заменяются на «дельты» между ними и файлами современными, после чего данные «дельты» складываются в один большой файл, к которому строится индекс. Это снижает требования по месту на диске.
Репозиторий git бывает локальный и удаленный. Локальный репозиторий — это поддиректория .git, создается (в пустом виде) командой git init и (в непустом виде с немедленным копированием содержимого родительского удаленного репозитория и простановкой ссылки на родителя) командой git clone.
Практически все обычные операции с системой контроля версий, такие, как коммит и слияние, производятся только с локальным репозиторием. Удаленный репозиторий можно только синхронизировать с локальным как «вверх» (push), так и «вниз» (pull).
Работа с Git из командной строки
Для работы с Git-репозиторием неопбходимо установить утилиту git. Данная утилита находиться в сети интернет в свободном доступе.
Для настройки конфигурации Git используются следующие команды:
ЛАБ 2. GIT в разработке ПО, 1-я часть
Изучение возможностей Git в разработке Java-приложений (Шпаргалка по теоретическому материалу - здесь )
Цели работы:
Ознакомиться с основами работы с системой контроля версий Git.
Научиться создавать и управлять репозиториями.
Освоить основные команды Git для работы с проектами на Java.
Понять принципы совместной работы в команде с использованием Git.
Оборудование и ПО:
Установленный Git (https://git-scm.com/)
Java Development Kit (JDK) (https://www.oracle.com/java/technologies/javase-jdk17-downloads.html)
Интегрированная среда разработки (IDE), например, IntelliJ IDEA или Eclipse или работа с консолью..
Задача 1. Введение в работу с GIT:
Задание 1: Установка и настройка Git
Установите Git на Ваш компьютер.
Инициируйте GIT Bash
Настройте Ваше имя и email:
Bash
git config --global user.name "Ваше Имя"
git config --global user.email ваш_email@example.com
Проверить настройки,можно где-то так:
...
END)
Задание 2: Создание репозитория
Создайте новую папку для Вашего проекта Java и перейдите в неё:
Bash
mkdir MyJavaProject
cd MyJavaProject
Инициализируйте новый Git-репозиторий:
Bash
git init
Р-т:
Initialized empty Git repository in C:/Users/Виталий/MyJavaProject/.git/
Задание 3: Разработка простого Java-приложения
Создайте простой Java-класс, например, HelloWorld.java, который выводит ""Привет, мир!, Hello Vitaly!"" на экран.
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;public class HelloWorld {
public static void main(String[] args) {
String text = "Привет, мир!, Hello Vitaly!";
try (OutputStreamWriter writer = new OutputStreamWriter(System.out, StandardCharsets.UTF_8)) {
writer.write(text);
writer.flush(); // Убедимся, что всё записано
} catch (IOException e) {
e.printStackTrace();
}
}
}
Скомпилируйте и запустите программу:
javac HelloWorld.java
java HelloWorld
Привет , мир!, Hello, Vitaly!
Задание 4: Добавление и коммит изменений
Добавьте файл в индекс Git:
Bash
git add HelloWorld.java
Зафиксируйте изменения с сообщением:
git commit -m "Добавлен класс HelloWorld"
Задание 5: Работа с удалённым репозиторием
Создайте репозиторий на GitHub или GitLab.
Свяжите локальный репозиторий с удалённым:
Bash
git remote add origin https://github.com/ваш_логин/MyJavaProject.git
Отправьте изменения в удалённый репозиторий:
git push -u origin main
Задача 2. возможностей Git в разработке ПО на Java с GIT:
Набор  простых Java-задач (тем) для практики работы с Git
Hello, World!
Программа выводит приветствие на русском.
Отлично подходит для первого коммита.
Калькулятор двух чисел
Сложение, вычитание, умножение, деление.
Можно сделать отдельную ветку для добавления каждой операции.
Конвертер температур
Цельсий ↔ Фаренгейт.
Ветка для добавления новой формулы.
Определение чётности числа
Ввод числа, вывод “чётное” или “нечётное”.
Можно сделать багфикс-ветку для исправления логики.
Таблица умножения
Вывод таблицы от 1 до 10.
Ветка для добавления форматированного вывода.
Сумма чисел от 1 до N
Ввод N, вывод суммы.
Можно протестировать git revert на изменении формулы.
Поиск максимального из трёх чисел
Ввод трёх чисел, вывод наибольшего.
Ветка для добавления проверки на равенство.
Генератор случайных чисел
Вывод 5 случайных чисел от 1 до 100.
Ветка для добавления сортировки.
Подсчёт количества гласных в строке
Ввод строки, вывод количества гласных.
Можно сделать git cherry-pick для переноса метода в другой проект.
Проверка палиндрома
Ввод слова, проверка, читается ли оно одинаково в обе стороны.
Ветка для добавления игнорирования регистра.
Факториал числа
Рекурсивный и итеративный методы.
Можно смержить две ветки с разными реализациями.
Сортировка массива
Реализация пузырьковой сортировки.
Ветка для добавления сортировки выбором.
Простые числа до N
Вывод всех простых чисел до заданного N.
Ветка для оптимизации алгоритма.
Мини-игра “Угадай число”
Компьютер загадывает число, пользователь угадывает.
Можно протестировать git stash при добавлении новой логики.
Конвертер валют (фиктивные курсы)
Перевод рублей в доллары и евро.
Ветка для добавления чтения курсов из файла.
Изучение простых возможностей Git в разработке на Java, в контексте дисциплины «Инструментальные средства промышленной разработки ПО»
Каждую задачу делать в отдельной ветке (Выбрать минимум 3-4 и более задач).   Делать маленькие коммиты с осмысленными сообщениями по шагам (создание файла, добавление метода, исправление ошибки).
Пробовать merge, rebase, cherry-pick, stash, revert (Перед merge всегда обновлять ветку через git pull --rebase или git rebase main).
Создавать pull request и делать code review даже самому себе.
Добавлять .gitignore для исключения target/ и временных файлов.
Цели работы:
Изучить основные команды Git.
Понять, как разрешать конфликты.
Освоить использование git stash, git rebase и git cherry-pick.
Задание 1: Инициализация репозитория
Создайте новый репозиторий Git:
Bash
  mkdir java-project
cd java-project
git init
  Создайте простой проект на Java, по одной из представленных тем (или свою, инициативную тему, по согласованию с преподавателем).
Java
  public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World!");
}
}
  Добавьте файл в репозиторий и зафиксируйте изменения:
Bash
git add HelloWorld.java
git commit -m "Добавлен HelloWorld.java"
Задание 2: Работа с ветками и разрешение конфликтов
Создайте новую ветку feature (выберите из возможных тем) и переключитесь на неё:
Bash
  git checkout -b feature
  Измените HelloWorld.java, добавив новую строку:
Java
  public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World!");
System.out.println("This is a feature branch!");
}
}
  Зафиксируйте изменения:
Bash
  git add HelloWorld.java
git commit -m "Добавлено сообщение в ветке feature"
  Переключитесь обратно на основную ветку main:
Bash
  git checkout main
  Внесите изменения в HelloWorld.java, добавив другую строку:
  public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World!");
System.out.println("This is the main branch!");
}
}
  Зафиксируйте изменения:
Bash
  git add HelloWorld.java
git commit -m "Добавлено сообщение в ветке main"
  Попробуйте слить ветку feature в main:
Bash
  git merge feature
Вы столкнётесь с конфликтом. Git сообщит о конфликте в файле HelloWorld.java.
  Разрешите конфликт:
Откройте HelloWorld.java, найдите конфликтующие строки и выберите, какие изменения оставить.
После разрешения конфликта добавьте файл и зафиксируйте изменения:
Bash
git add HelloWorld.java
git commit -m "Разрешён конфликт при слиянии веток"
Задание 3: Использование git stash
Внесите изменения в HelloWorld.java, но не фиксируйте их:
Java
  public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World!");
System.out.println("Some temporary changes!");
}
}
  Используйте git stash, чтобы сохранить изменения и очистить рабочую директорию:
Bash
  git stash
  Проверьте статус и убедитесь, что изменения сохранены:
Bash
  git status
  Восстановите изменения из хранилища:
Bash
git stash pop
Задание 4: Использование git rebase
Создайте новую ветку bugfix от main:
Bash
  git checkout -b bugfix
  Внесите изменения в HelloWorld.java и зафиксируйте их:
Java
  public class HelloWorld {
public static void main(String[] args) {
System.out.println("Hello, World!");
System.out.println("Fixing a bug!");
}
}
git add HelloWorld.java
git commit -m "Исправление бага в ветке bugfix"
  Переключитесь обратно на main и внесите изменения:
Bash
  git checkout main
  Теперь выполните git rebase для ветки bugfix:
Bash
git checkout bugfix
git rebase main
Задание 5: Использование git cherry-pick
Переключитесь на ветку main:
Bash
  git checkout main
  Найдите хэш коммита в ветке bugfix, который хотите перенести:
Bash
  git log
  Используйте git cherry-pick, чтобы перенести изменения из bugfix в main:
Bash
git cherry-pick <commit-hash>
Задание 6. Рассмотреть различные виды конфликтов, организовать, как минимум:
- конфликты в одной задаче (меняет те же строки, меняет ту же часть кода; меняет формат вывода и т.п)
- конфликт между разными задачами (например, в методе main());
- конфликт в ресурсах.
При защите знать основные команды и методы работы с GIT

[ТАБЛИЦЫ]
Команда | Комментарий
git config --global user.name Имя | Задает имя пользователя
git config --global user.email  email@example.com | Задает email пользователя
git init | Если проекта нет, его можно инициализировать командой
git status | Состояние: что было отредактировано, что добавлено в индекс для коммита
git add . | добавить в индекс все изменения
git add file.txt | добавить содержимое файла в индекс
git commit | Коммит проекта
git commit -am "comment" - add + commit | Коммит без добавления новых файлов
git branch | список веток
git checkout имя_ветки | Переход в другую ветку
git checkout -f | отметить незакоммиченные изменения
git diff ветка1 ветка2 | Сравнить ветка1 и ветка2
git merge новая_ветка | Объединение текущей ветки и новая_ветка
git reset --hard HEAD | Вернуть ветку в состояние до слияния
git push pb master | Отправить код в ветку master удаленного репозитория pb
git fetch pb | Извлечь информацию из репозитория pb