РЕФЕРАТ 

БГУИР КП 1-39 02 01 060 ПЗ Шемерей, А.А. Автоматизированная проверка различных работ на плагиат на основе репозитория БГУИР с использованием метода интеллектуального анализа: пояснительная записка к курсовому проекту / А.А. Шемрей. – Минск: БГУИР, 2024. – 66 с. Пояснительная записка 66 с., 51 рис., 1 табл., 33 источника, 3 приложения.

РАБОТ СТУДЕНТОВ НА ОСНОВЕ РЕПОЗИТОРИЯ БГУИР 

Цель проектирования: разработка веб-сервиса, предназначенного для автоматизации процесса проверки оригинальности работ студентов и преподавателей на основе репозитория БГУИР. Методология проведения работы: в ходе выполнения поставленных задач использовались принципы системного подхода, проведен анализ требований к сервису, реализован необходимый функционал. Результаты работы: проведен анализ требований пользователей к веб- сервису, разработано общетехническое обоснование проекта, реализован механизм проверки оригинальности текстов, уделено внимание обработке ошибок и разработан пользовательский интерфейс. обеспечению корректной сервиса, работы Веб-сервис позволяет загружать работы для проверки, получать детальные отчеты о проценте уникальности текста и о возможных источниках совпадений в репозитории БГУИР. Область применения результатов: разработанное программное средство может быть использовано для создания аналогичных сервисов в образовательных учреждениях с целью проверки уникальности научных и учебных работ студентов и преподавателей.

ВВЕДЕНИЕ 

В рамках данного курсового проекта был разработан веб-сервис, направленный на помощь в проверке оригинальности различных работ на основе обеспечивает работоспособность на различных операционных системах, таких как Windows, Linux и Mac OS X. БГУИР. Данный репозитория веб-сервис Основной целью данного проекта является обеспечение возможности автоматизации процесса проверки оригинальности работ студентов и задачами, поставленными перед преподавателей БГУИР. Важными разработчиками, было создание функционала, позволяющего пользователям загружать работы для проверки, получать детальные отчеты о проценте уникальности текста и о возможных источниках совпадений. При выполнении курсового проекта были учтены государственные стандарты и нормативные документы, а также использованы рекомендации СТП БГУИР 01–2017 [1]. В пояснительной записке к работе будут представлены три основных раздела: анализ исходных данных и постановка задач; проектирование, разработка и тестирование программного средства; эксплуатация программного средства. Для наглядного представления информации в рамках курсового проекта будут использованы графические материалы, включая ER-диаграмму базы данных, UML диаграмму вариантов состояний, UML диаграмму использования, графический интерфейс программного средства. Проект был выполнен самостоятельно и протестирован на уникальность с помощью системы «Антиплагиат». Процент оригинальности составил 94.92 %. Все цитирования и использованные материалы будут четко указаны в «Списке использованных источников».

1.1 Анализ исходных данных к курсовому проекту 

научная образование Современное требуют и эффективных инструментов для проверки оригинальности работ. Проверка оригинальности работ становится необходимостью для поддержания интеллектуальной честности и качества образования. Плагиат становится все более распространенной проблемой, поэтому разработка веб-сервиса для проверки оригинальности работ на базе репозитория БГУИР является актуальной задачей. деятельность Студенты и преподаватели часто сталкиваются с необходимостью проверки работ на плагиат. Однако отсутствие удобного и доступного инструмента для проведения такой проверки может затруднять и замедлять процесс обучения и научной деятельности. В рамках данного курсового проекта предлагается разработать веб- сервис, который будет предоставлять возможность проверки оригинальности различных работ на основе репозитория Белорусского государственного университета информатики и радиоэлектроники (БГУИР). Веб-сервис для проверки оригинальности различных работ будет предоставлять удобный интерфейс для загрузки работ и проведения проверки на оригинальность. Основные функциональности сервиса включают:  авторизация: пользователи смогут войти в систему для доступа к сервису используя свой аккаунт в системе ИИС БГУИР;  загрузка работ: пользователи смогут загружать свои работы в систему для проверки на плагиат;  проверка оригинальности: анализ загруженных работ и сравнивать с содержимым репозитория БГУИР для выявления возможных совпадений; система будет проводить  отчеты и результаты: после завершения анализа пользователи получат подробный отчет о результатах проверки, который можно скачать в формате pdf;  управление работами: пользователи смогут просматривать и управлять своими загруженными работами, просматривать историю проверок и делать необходимые действия на основе результатов. Разработка данного веб-сервиса для проверки оригинальности работ на основе репозитория БГУИР позволит обеспечить эффективную и доступную проверку работ для студентов и преподавателей. Веб-сервис «Антиплагиат» поможет бороться с плагиатом и поддерживать академическую честность, а также хранить все работы в едином структурированном виде. Разработка подобного веб-сервиса будет способствовать улучшению качества образования и научной деятельности за счет предоставления эффективного работ, способствовать развитию инструментов для борьбы с плагиатом и поддержанию академической честности в образовании и науке. Веб-сервис будет полезен как студентам, так и преподавателям, для обеспечения интеллектуальной честности и качества научных и учебных материалов. оригинальности инструмента проверки для

1.2 Обзор существующих программных средств по теме курсового 

проекта В сети Интернет существует множество веб-сервисов по антиплагиату. Разрабатываются все более и более функциональные программные средства. Однако большое количество данных программных средств не говорит о бессмысленности разрабатываемого приложения. Несмотря на то, что существующие программы предоставляют различные функции, многие пользователи могут позволить только бесплатный интерфейс, не имея доступа к полному функционала. Было принято решение рассмотреть наиболее популярные и схожие с разрабатываемым приложением программные средства. Так для сравнения были выбраны: «Антиплагиат», «PlagScan», «Text.ru», «Antiplagius» и «Be1». Антиплагиат – платформа, которая широко используется для выявления плагиата. Основана на сравнении текста работы с обширной базой данных научных публикаций, учебных материалов, интернет-ресурсов и других источников. Пользователи могут загружать свои работы на платформу и получать детальные отчеты о совпадениях с другими источниками. Помогает преподавателям, студентам и исследователям предотвращать академическое списывание и поощрять оригинальность мысли. Антиплагиат обладает высокой степенью точности в обнаружении плагиата и широко используется в образовательных учреждениях и научных организациях [2]. PlagScan – мощный инструмент для анализа оригинальности текста, который позволяет загружать и анализировать документы в различных форматах. PlagScan предоставляет гибкие настройки поиска плагиата и создает подробные отчеты о совпадениях, помогая пользователям эффективно бороться с копированием и поддерживать академическую честность [3]. Text.ru – многофункциональный инструмент для проверки текста, который помимо анализа грамматики и стиля также предлагает возможность проверки оригинальности контента. Пользователи могут использовать Text.ru для обнаружения плагиата и избежания нежелательных совпадений с другими источниками. Инструмент предоставляет детальные отчеты о совпадениях, что помогает поддерживать высокую уникальность и качество текстов [4]. Antiplagius обеспечение, разработанное для обнаружения плагиата в онлайн-текстах. Antiplagius специализированное программное – проводит сканирование веб-ресурсов с целью выявления совпадений и предоставляет пользователям подробные отчеты о найденных схожих фрагментах. Этот инструмент помогает обеспечить уникальность контента и защитить авторские права [5]. Be1 – инновационное решение для борьбы с плагиатом, предназначенное как для образовательных, так и для коммерческих целей. Be1 предлагает широкий спектр функций для анализа текста и генерирует подробные отчеты о совпадениях с другими источниками. Инструмент помогает пользователям эффективно бороться с плагиатом и поддерживать высокий уровень академической и профессиональной честности [6]. При рассмотрении системы аутентификации важно обратить внимание на функциональные возможности. Обычно экран авторизации содержит поля для ввода адреса электронной почты и пароля, а также предлагает возможность аутентификации через социальные сети. Кроме того, присутствуют кнопки «Войти», «Регистрация» и «Забыли пароль». Однако, в данном случае, ни один из представленных веб-сервисов не соответствует требуемому функционалу, поскольку в системе не предусмотрена регистрация пользователей. Вместо этого необходимо обеспечить только процесс авторизации, который должен быть связан и взаимодействовать с информационной системой БГУИР. На рисунке 1.1 представлены экраны сравниваемых веб-сервисов «BE1.ru», «Antiplagius», «Text.ru». «Antiplagius», «Text.ru» На рисунке 1.2 представлены экраны сравниваемых веб-сервисов «PlagScan», «Антиплагиат», и разрабатываемого приложения «Антиплагиат». «Антиплагиат» и разрабатываемого веб-сервиса «Антиплагиат» Рассмотрим непосредственно экран для работы с антиплагиатом. На рисунке 1.3 представлены экраны работы антиплагиата «BE1.ru», «PlagScan», «Text.ru». На первом скриншоте, относящемся к веб-сервису «Антиплагиат», заметно, что интерфейс достаточно информативен и интуитивно понятен для пользователя. Несмотря на то, что на экране содержится много информации, организована компактно и четко. Второй скриншот представляет экран веб- сервиса «PlagScan», где крупные кнопки и информация о балансе занимают значительное пространство, которое может вызывать необходимость прокрутки страницы для доступа ко всем функциям, что может быть неудобно для пользователей. На третьем скриншоте, принадлежащем веб-сервису «Text.ru», интерфейс выглядит минималистично и лишен лишних элементов, что позволяет пользователю сосредоточиться на основных задачах. Однако, отсутствие мобильной версии может быть значительным недостатком для пользователей, которые предпочитают использовать сервис с мобильных устройств. «BE1.ru», «PlagScan», «Text.ru» приложения На рисунке 1.4 представлены экраны работы двух антиплагиатных приложений: «Antiplagius» и «Be1.ru». Первый скриншот отображает интерфейс «Antiplagius», который, несмотря на освобождение от избыточных элементов, выглядит достаточно устаревшим из-за маленького размера шрифта и излишней загруженности верхней части экрана. Кроме того, основной функционал антиплагиата кажется зажатым в узком пространстве. Рекламный баннер внизу экрана также привлекает слишком много внимания, что может отвлечь пользователя. На втором скриншоте представлен интерфейс ясным, привлекательным и легким дизайном. В нем отсутствуют лишние элементы, такие как рекламные баннеры, что позволяет пользователю сосредоточиться исключительно на функционале. Это создает приятный опыт использования и повышает удовлетворенность пользователя. Третий скриншот представляет собой экран разрабатываемого веб-сервиса. Здесь система загрузки документа разработана таким образом, чтобы пользователь мог легко задать название файла, выбрать тип работ и загрузить файл для проверки. Отсутствие рекламы и других отвлекающих элементов позволяет пользователю эффективно выполнять основные задачи без лишних помех и создает благоприятное впечатление о сервисе. отличается «BE1.ru», который «Antiplagius», «BE1.ru» и разрабатываемого веб-сервиса «Антиплагиат» Возможность перейти в личный кабинет в самом веб-сервисе является значимым преимуществом для пользователей. Среди сравниваемых веб- сервисов личный кабинет представлен в приложениях «Антиплагиат», «Text.ru» и «Be1.ru». Однако, у каждого веб-сервиса есть свое собственное видение того, что должно включать в себя личное пространство пользователя. На экране веб-сервиса «Антиплагиат» представлены такие опции как удаление аккаунта, изменение пароля, адреса электронной почты и других учетных данных. В то время как экран веб-сервиса «Text.ru» выводит информацию о последнем входе в систему, дате регистрации, адресе электронной почты и других аспектах, связанных с профилем пользователя. Экран веб-сервиса «Be1.ru» обладает функционалом вывода и редактирования персональных данных, адреса электронной почты, а также социальных сетей и фотографий пользователя. Это дает пользователям возможность настройки и персонализации своего профиля в соответствии с предпочтениями. В разрабатываемом веб-сервисе в личном кабинете представлена информация о ФИО и адресе электронной почты, но без возможности редактирования или удаления этих данных. Это может быть полезным в случае, если важно сохранить неподвижность некоторых личных данных для обеспечения безопасности и устойчивости аккаунта. Экраны веб-сервисов «Антиплагиат», «Text.ru» представлены на рисунке 1.5. «Антиплагиат», «Text.ru» Экраны веб-сервисов «BE1.ru» и разрабатываемого веб-сервиса «Антиплагиат» представлены 1.5. «BE1.ru» и разрабатываемого веб-сервиса «Антиплагиат» Каждая программа предлагает как платные, так и бесплатные функции. В бесплатном режиме могут быть ограничения на количество отправляемых файлов в день или в определенное время, на размер проверяемого файла, количество слов для проверки, и доступность формата PDF для получения отчета и так далее. Чтобы избежать таких ограничений, необходимо иметь премиум-аккаунт. Также не все веб-сервисы имеют планшетную и мобильную реализацию, из-за этого появляются неудобства при работе на маленьких экранах. Можно сделать вывод о том, что в сфере антиплагиата присутствует большое количество веб-сервисов, которые имеют многомилионную аудиторию, то есть данная сфера очень востребована. Результат сравнения отображен  1. Критерий сравнения 1 Адаптивность Регистрация Авторизация через сторонний ресурс Личный кабинет Бесплатный функционал антиплагиата BE1.RU Antiplagius Text.ru PlagScan Антиплагиат Антиплагиат

БГУИР 

2 4 6 Сравнение существующих выделяет определенные соответствовать разрабатываемый веб-сервис. Нет идеального решения, удовлетворяющего всем требованиям, но есть возможность создать веб-сервис, соответствующий характеристики, программных которым средств должен большинству из них. Это начинается от системы аутентификации и заканчивается функционалом антиплагиата. Для удовлетворения разнообразных потребностей пользователей необходимо, чтобы веб-сервис был интуитивно понятным и легко доступным для использования. Основной акцент следует сделать на точности анализа и быстроте обработки информации, чтобы пользователи могли эффективно использовать антиплагиат в повседневной деятельности.

1.3 Обоснование и описание выбора языка программирования, 
средств разработки, используемых технологий и сторонних 
библиотек 

В данном курсовом проекте использованы:  язык программирования Python;  фреймворк Django;  интегрированная среда разработки VSCode;  система контроля версий Git и онлайн-сервис GitHub. Python высокоуровневый язык программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, ориентированный на повышение производительности разработчика, читаемости кода и качества, а также на обеспечение переносимости написанных на нём программ [7-9]. Python предоставляет доступ к большому количеству библиотек и фреймворков, которые могут упростить разработку и сократить время на написание кода. Например, для веб-разработки существуют Django и Flask, для анализа данных pandas и NumPy, для машинного обучения scikit-learn и TensorFlow. Это позволяет студентам сосредоточиться на логике курсового проекта, а не на разработке базовой функциональности с нуля. Python является кроссплатформенным языком, это означает, что код, написанный на одном устройстве, будет работать на любом другом устройстве с установленным интерпретатором Python. Python предоставляет высокий уровень абстракции, что позволяет сосредоточиться на решении задач высокого уровня, не погружаясь в детали низкоуровневого программирования. Python широко используется в академических кругах для обучения программированию, а также в научных исследованиях, благодаря своим мощным инструментам для обработки данных и моделирования. В индустрии Python также популярен благодаря своим возможностям в области веб- разработки, автоматизации, анализа данных и машинного обучения. Django, свободный фреймворк для веб-приложений на языке Python, использующий шаблон проектирования MVC. Проект поддерживается организацией Django Software Foundation. Сайт на Django строится из одного или нескольких приложений, которые рекомендуется делать отчуждаемыми и подключаемыми [10-13]. Django разработан с учетом принципа «надежная работа из коробки», что позволяет быстро начать разработку веб-приложений. Включает в себя все необходимые компоненты, такие как аутентификация пользователей, админ- панель, управление сессиями и кеширование, значительно ускоря процесс создания проекта. Django придерживается принципов DRY (Don't Repeat Yourself) и KISS (Keep It Simple, Stupid), помогая разработчикам писать более чистый, поддерживаемый и переиспользуемый код. Django включает в себя множество функций безопасности, таких как защита от SQL-инъекций, XSS, CSRF и кликджекинга. Также регулярно обновляется, чтобы защищать приложения от новых угроз. Django предоставляет мощные инструменты для разработки, такие как ORM (Object-Relational Mapping), URL-диспетчеризация, системы шаблонов и формы. Эти инструменты упрощают работу с базами данных, маршрутизацией запросов и отображением данных, что позволяет студентам сосредоточиться на разработке функциональности приложения. Так же существует множество мощных интегрированных сред разработки (IDE) для веб-сайтов с помощью, Python, Django, таких как VSCode, IntelliJ IDEA, WebStorm и другие [14]. Предоставляют разработчикам удобные инструменты для создания, отладки и тестирования приложений. При разработке программного средства для данного курсового проекта выбран VSCode. VSCode – интегрированное средство разработки (IDE), обладающее обширным набором инструментов для улучшения процесса написания кода [15]. Одним из преимуществ является обширный набор операций рефакторинга, таких как переименование переменных и извлечение методов, которые значительно упрощают изменение структуры кода и повышают читаемость. Кроме того, VSCode предоставляет контекстно-зависимые увеличению подсказки производительности и снижению вероятности возникновения ошибок [16]. IDEA, с другой стороны, также предоставляет удобный интерфейс для создания новых проектов и импортирования существующих. Интегрируется с системами контроля версий, такими как Git, Subversion и Mercurial, способствуя дополнение кода, авто и обеспечивая удобное отслеживание изменений в коде. Более того, IDEA поддерживает различные языки программирования, включая PHP, Kotlin, JavaScript, Python и многие другие, что делает VSCode универсальным инструментом для разработки в рамках одной среды. Дополнительно, IDEA включает инструменты для работы с базами данных и SQL-запросами [17], позволяя разработчикам управлять и редактировать таблицы, выполнять запросы и многое другое, не выходя из среды разработки. Кроме того, с помощью плагинов и расширений разработчики могут расширять функциональность IDE и добавлять дополнительные инструменты по мере необходимости. Выбор системы контроля версий Git и онлайн-сервиса GitHub обоснован исходя из ряда ключевых преимуществ и возможностей, которые предоставляют для эффективного управления кодом и совместной работы над проектами [18]. Git является одной из самых популярных и широко используемых систем контроля версий в мире разработки программного обеспечения. Распространенность обусловлена простотой в использовании, распределенной структурой, высокой скоростью работы и мощными функциями ветвления и слияния [19]. Git позволяет эффективно отслеживать изменения в коде, возвращаться к предыдущим версиям проекта и управлять конфликтами в изменениях. GitHub, с другой стороны, является онлайн- платформой для хостинга Git-репозиториев, которая предоставляет дополнительные инструменты для совместной работы над проектами [20]. Git обладает широким набором функций, таких как задачи и проблемы (issues), запросы на объединение (pull requests), вики, управление правами доступа и многое другое Использование Git и GitHub позволяет разработчикам эффективно организовывать рабочий процесс, отслеживать изменения в коде, реагировать на обратную связь со стороны других участников проекта, а также обеспечивать надежное хранение и резервное копирование кодовой базы. Благодаря распространенности и популярности, Git и GitHub являются стандартом в индустрии разработки программного обеспечения и обеспечивают надежную основу для успешного ведения проектов.

1.4 Постановка задач на курсовое проектирование 

Необходимо спроектировать и разработать графический интерфейс веб- сервиса, предназначенного для проверки оригинальности различных работ (курсовые, дипломные, научные, статьи и т. д.) на основе репозитория БГУ- ИР. Цель системы заключается в обеспечении проверки оригинальности работ на основе репозитория БГУИР. Требования к языкам программного обеспечения являются крайне важными и ориентированы на использование русского языка, что обеспечивает удобство и понятность для конечных пользователей. Графический интерфейс системы состоит из нескольких страниц:  главная страница;  страница авторизации;  страница личного кабинета;  страница кабинета пользователя;  страница роль пользователя;  модальное окно «Загрузка документа»;  модальное окно «Отправить документ ан защиту»;  модальное окно «Оценить документ». Главная страница предназначена для общего ознакомления с сервисом и предоставляет основную информацию о возможностях. Страница авторизации обеспечивает безопасный доступ к функциям системы. Личный кабинет предоставляет возможность пользователям управлять своими данными и настройками. Кабинет пользователя позволяет загружать работы на проверку оригинальности. Роль пользователя определяет права и доступ к функционалу в соответствии с уровнем привилегий. Этапы разработки веб-сервиса включают в себя несколько ключевых шагов. В первом этапе производится обзор предметной области проекта и анализ аналогичных программных средств. Это позволяет определить преимущества и недостатки существующих решений и обосновать выбор языка программирования и средств разработки. Второй этап включает в себя:  создание архитектуры программного средства;  разработка базы данных;  алгоритмы функционирования приложения;  проектирование пользовательского графического интерфейса. Результатом этого этапа является полностью функционирующее программное средство, готовое к тестированию и дальнейшей эксплуатации. Третий этап предполагает составление инструкции по развертыванию и эксплуатации приложения. Последний этап включает оформление пояснительной записки и графического материала. Сюда входят плакаты и чертежи, такие как ER- диаграмма базы данных, UML диаграмма состояний и вариантов использования, а также графический интерфейс программного средства. Этот этап важен для документирования разработки и предоставления полной информации о системе. Таким образом, этапы разработки, которые необходимо выполнить в ходе курсовой работы для успешной реализации веб- сервиса проверки оригинальности работ на основе репозитория БГУИР. сформулированы 2 ПРОЕКТИРОВАНИЕ, РАЗРАБОТКА И

2.1 Проектирование и реализация способа хранения данных  

программного средства База данных – совокупность структурированных взаимосвязанных данных, относящихся к определённой предметной области и организованных для решения определенных задач разными пользователями. База данных предназначена для хранения, изменения и обработки информации. В ходе разработки используется PostgreSQL – мощная реляционная база данных с открытым исходным кодом, которая широко применяется для веб- [24]. PostgreSQL предоставляет сервисов и мобильных приложений разработчикам надежное хранилище данных с расширенными возможностями работы с данными и поддержкой многих языков программирования для разработки приложений. PostgreSQL преимуществ, обладает которые делают рядом привлекательный выбор для разработчиков: 1 Надежность: PostgreSQL предлагает высокую степень надежности и целостности данных благодаря своей транзакционной архитектуре и механизмам обеспечения целостности данных. 2 Гибкость и масштабируемость: PostgreSQL легко масштабируется высокую веб-приложения, вместе вашего производительность даже при больших объемах данных. обеспечивая ростом с 3 Расширяемость: спектр расширений и возможностей для настройки, что позволяет разработчикам создавать уникальные и эффективные решения под свои потребности. предоставляет широкий PostgreSQL 4 Поддержка стандартов: PostgreSQL полностью совместим с ANSI SQL и предлагает расширенные возможности работы с геоданными, JSON и другими современными типами данных. 5 Безопасность: PostgreSQL обеспечивает защиту данных с помощью шифрования и других мер безопасности. 6 Безопасность Существует активное сообщество разработчиков и экспертов, которые поддерживают и развивают PostgreSQL, что обеспечивает непрерывное развитие и поддержку базы данных. Django предоставляет встроенные механизмы для взаимодействия с различными системами управления базами данных (СУБД), включая PostgreSQL. В этом разделе рассматривается, как Django связывается с PostgreSQL, как управляет базой данных и как обеспечивается работа всех компонентов системы. Для подключения Django к PostgreSQL необходимо настроить параметры подключения в файле настроек проекта settings.py. Основные параметры включают указание типа базы данных, имя базы данных, пользователя, пароль и хост. Пример подключения базы данных в settings.py представлен 2.1. Эти настройки позволяют Django подключаться к базе данных PostgreSQL и использовать её для хранения и извлечения данных. Django использует механизм миграций для создания и изменения схемы базы данных на основе моделей, определённых в коде. Миграции позволяют синхронизировать состояние базы данных с определениями моделей. Для создания миграций используется команда makemigrations, которая анализирует изменения в моделях и создаёт соответствующие файлы миграций. Для применения миграций и обновления базы данных используется команда migrate. Эти команды генерируют SQL-запросы, которые выполняются в базе данных для создания или изменения таблиц и других объектов. Django ORM позволяет взаимодействовать с базой данных, используя Python-классы и методы вместо написания прямых SQL-запросов. Модели Django представляют собой классы, которые автоматически связываются с таблицами в базе данных. Модели в Django определяются как подклассы django.db.models.Model. Каждое поле модели соответствует колонке  базы данных. Основой архитектуры являются модели, хранения описывающие структуры данных и связи между ними. В данном разделе описаны модели Document, Status, Type и User, поля, а также используемые методы и сигналы. данных Модель Status используется для хранения информации о статусах документов. Программная реализация данной модели показана 2.2. Поля модели Status:  name: название статуса;  html_clase: CSS-класс для отображения статуса. Модель Type предназначена для хранения типов работ, связанных с документами. Программная реализация модели Type представлена 2.3. Поля модели Type:  name: название типа работы. Модель Document является основной моделью, описывающей документы, загружаемые пользователями. Программная реализация модели Document представлена 2.4. Поля модели Status:  user: ссылка на модель User, указывающая владельца документа;  name: название документа;  result: процент оригинальности документа;  type: тип работы, связанной с документом;  time_created: дата и время загрузки документа;  data: файл PDF документа;  txt_file: файл с текстовым содержимым документа;  status: текущий статус документа. В Django стандартная модель пользователя предоставляет базовый функционал для аутентификации и управления пользователями. Включает в себя необходимые поля и методы для работы с пользователями, такие как логин, пароли и профили. Django предлагает две базовые модели для работы с пользователями: AbstractUser и AbstractBaseUser. В большинстве случаев используется AbstractUser, которая включает в себя все стандартные поля и методы, необходимые для пользователя. Модель AbstractUser является частью пакета django.contrib.auth.models и наследует от AbstractBaseUser и PermissionsMixin. Предоставляет удобный способ для расширения модели пользователя, добавляя дополнительные поля и методы. Модель AbstractUser включает следующие поля:  username: Имя пользователя. Уникальное поле, используемое для идентификации пользователя;  first_name: Имя пользователя;  last_name: Фамилия пользователя;  email: Электронная почта пользователя;  password: Хэшированный пароль пользователя;  is_staff: Флаг, указывающий, является ли пользователь членом персонала сайта;  is_active: Флаг, указывающий, активен ли пользователь;  date_joined: Дата и время регистрации пользователя;  last_login: Дата и время последнего входа пользователя. Для добавления новых полей к модели User, создаём пользовательскую модель, наследующуюся от AbstractUser, добавим отчество (sur_name) и аватар пользователя (image). Программная реализация расширения модели User представлена 2.5. Поля модели User добавленные в результате расширения:  sur_name: Отчество пользователя. Поле CharField с максимальной длиной 100 символов;  image: Аватар пользователя. Поле ImageField, позволяющее загружать и хранить изображения. После создания пользовательской модели необходимо указать Django использовать её вместо стандартной модели. Для этого в файле настроек settings.py добавляем строку AUTH_USER_MODEL = 'your_app_name.User'. следующую Использование ORM Django позволяет легко управлять связями между моделями и автоматизировать выполнение рутинных задач, что значительно упрощает разработку и поддержку приложения. PostgreSQL представляет в разработчиков области производительность, надежность и защиту данных. веб-разработки, собой надежные инструменты обеспечивая для высокую

2.2 Проектирование и разработка графического интерфейса 

Проектирование и разработка графического интерфейса – один из самых важных этапов создания веб-сервиса, так как именно интерфейс является основным способом взаимодействия пользователя с приложением. Перед началом проектирования необходимо определить целевую аудиторию и ее потребности. Это поможет создать удобный и понятный интерфейс, который будет максимально соответствовать требованиям пользователей. Для построения грамотного интерфейса нужно соблюдать принципы UI/UX [25]. UI (User Interface) и UX (User Experience) – процесс создания удобного и привлекательного интерфейса для пользователей. Этот процесс включает в себя разработку дизайна, который будет удобен для использования и будет привлекать пользователей к продукту. UI (User Interface) – интерфейс, который пользователи видят и используют для взаимодействия с продуктом. UI включает в себя все элементы, такие как кнопки, меню, тексты и изображения, которые помогают пользователям выполнять задачи в приложении. UX (User Experience) – опыт, который пользователь получает при использовании программного продукта. UX включает в себя такие аспекты, как удобство использования, скорость работы, интуитивность интерфейса и т. д. Есть несколько основных правил, которым должно соответствовать приложение: 1 Интуитивность и простота: приложение должно быть простым в использовании, чтобы пользователь мог быстро разобраться в нем и понять, как выполнять нужные действия. 2 Визуальная согласованность: все элементы приложения должны быть оформлены в едином стиле, чтобы пользователь легко мог ориентироваться в приложении. 3 Удобство навигации: приложение должно иметь понятную и логичную систему навигации, чтобы пользователь мог найти нужную информацию. 4 Скорость работы: приложение должно быстро загружаться и работать без задержек, чтобы пользователь не терял терпение и не переключался на другое приложение. Таким образом, необходимо создавать простой и интуитивно понятный интерфейс, который будет легко осваиваться пользователями. Отсутствие лишних элементов и явных инструкций также может улучшить юзабилити интерфейса. Пользовательский интерфейс веб-сервиса «Антиплагиат» состоит из следующих экранов:  страница авторизации;  страница кабинета;  страница с результатами;  страница личного кабинета;  страница с ролями пользователей;  модальное окно «Загрузка документа»;  модальное окно «Отправить документ ан защиту»;  модальное окно «Оценить документ». Рассмотрим графический дизайн для мобильных устройств. В первую очередь, при проектировании пользовательского интерфейса экрана «Авторизации». Дизайн создать экран нужно «Авторизации» представлен 2.6. грамотный Страница «Авторизации» является лицом приложения, это тот экран, с которым пользователь будет взаимодействовать в первую очередь. Данный экран имеет минимальное количество элементов дизайна. Имеет поля логина и пароля, а также для пароля кнопка показать/скрыть пароль, кнопку «Войти», а также информационный блок со ссылками на сторонние ресурсы для помощи пользователю в случаи если пользователь находиться первый раз на веб-сервисе или если логин/пароль не работает. После успешной авторизации автоматически запускается экран «Кабинета». На странице «Кабинета» размещены некоторые документы пользователя, если они имеются. Также страница «Кабинета» содержит поиск по названию документа, пагинацию и кнопку «Проверить документ». Для каждого документа есть кнопка в виде иконки «Подробнее», нажимая появляется панель по работе с документом с двумя кнопками. Дизайн страницы «Кабинет» со сразу открытым выпадающим списком для одного из документов представлен 2.7. выпадающим списком для документа Нажав на кнопку «Отправить на проверку», в выпадающем меню документа, открывается модальное окно «Отправить документ на защиту» с подробной информацией о документе и кнопкой «Отправить». Дизайн модального окна «Отправить документ на защиту» показан 2.8. Кнопка «Проверить документ» на странице «Кабинета» является ключевым элементом в процессе загрузки новых материалов для проверки оригинальности. При нажатии на эту кнопку открывается модальное окно, которое предоставляет удобный интерфейс для загрузки документа. Модальное окно не только содержит поля для ввода названия работы и выбора типа работы из списка, но и область для загрузки самого документа в формате *pdf. Это позволяет пользователю удобно и быстро загружать необходимые материалы для проверки оригинальности. Особенно удобной функцией является возможность предварительного просмотра загруженного документа прямо в модальном окне. Это обеспечивает пользователю дополнительный контроль над загруженными данными и упрощает процесс проверки перед отправкой на анализ. Кроме того, наличие функции удаления загруженного документа позволяет пользователю аккуратно управлять своими данными, удаляя лишнее или ошибочно загруженное содержимое. Пример дизайна модального окна «Загрузка документа» представлен на рисунке 2.9. Когда пользователь авторизован, на каждой странице есть в шапке веб- сервиса иконка, нажимая на которую появляется выпадающее меню с возможностью перехода по страницам и кнопкой «Выхода» для выхода из системы. Дизайн выпадающего меню показан 2.10. Нажимая на кнопку «Личный кабинет» в выпадающем меню, происходит переход на экран «Личный кабинет». Дизайн страницы «Личный кабинет» представлен 2.11. Кнопка «Роль пользователя» в выпадающем меню предоставляет доступ к странице «Роль пользователя», однако эта страница доступна только для администраторов. Для обычных пользователей не отображается в способствует упрощению интерфейса и выпадающем меню, что предотвращает лишнее путаницу. На странице «Роль пользователя» пользователи могут выполнить поиск по ФИО и управлять пагинацией, что делает процесс поиска и навигации более удобным. Это особенно важно при работе с большим объемом данных, таких как информация о пользователях. Таким образом, кнопка «Роль пользователя» обеспечивает доступ к соответствующей странице, а дизайн этой страницы способствует удобству и эффективности пользовательского опыта. Дизайн страницы «Роль пользователя», изображенный 2.12, разработан с учетом удобства использования. Нажимая на кнопку «Результаты» в выпадающем меню осуществляется переход на страницу «Результаты». На странице отображается поиск по ФИО, пагинация и результаты. Дизайн страницы «Результаты» с открытым выпадающим списком для данного результата представлен 2.13. списком для результата При нажатии на кнопку «Оценить» открывается модальное окно с названием «Оценить документ». Это окно предоставляет подробную информацию о результате проверки документа и содержит две кнопки действий: «Отправить на доработку» и «Зачтен». Дизайн модального окна «Оценить документ» представлен на рисунке 2.14. Проектирование и разработка графического интерфейса приложения процесс, требующий не только технической компетентности, но и творческого подхода. Правильно спроектированный интерфейс может сделать веб-сервис более привлекательным для пользователей и удобным в использовании. Привлекательный и интуитивно понятный интерфейс может стать ключевым фактором успешного взаимодействия с сервисом, привлекая новых пользователей и удерживая уже существующих. В рамках данного раздела осуществлялась разработка веб-сервиса «Антиплагиат», и графический интерфейс играл важную роль в создании. Интерфейс был спроектирован с учетом требований пользователей и особенностей функционала сервиса, чтобы обеспечить максимальное удобство использования и приятный внешний вид.

2.3 Алгоритм работы системы 

Основная задача данной системы проверки текста на оригинальность, непосредственно перед проверкой текста на плагиат необходимо перевести в удобную для работы форму. В системе работы на проверку поступают в виде pdf-файлов с задачей хранения информации такое решение имеет свои преимущества ведь такой формат в случае одобрения работы удобно хранить для последующего просмотра или отправки в другой репозиторий. Но для работы алгоритма проверки текста такой формат не приемлем. Для решения данной проблемы было принято решения парсинга текстовой информации и хранении в txt-файле. Рассмотрим реализацию данного метода. Алгоритм автоматизирует процесс извлечения текста из загруженного PDF-документа и сохранения этого текста в текстовый файл. Реализован с использованием сигналов Django, что позволяет выполнять необходимые действия сразу после сохранения объекта Document. Сигналы в Django представляют собой межкомпонентный механизм коммуникации, который позволяет различным частям приложения взаимодействовать посредством уведомлений о происходящих событиях. Это средство обеспечивает возможность одному модулю отправлять уведомления о событиях, а другому реагировать на эти уведомления, тем самым синхронизируя работу. Такой подход особенно полезен для автоматического выполнения действий в ответ на изменения состояния приложения, таких как создание, обновление или удаление объектов. Сигналы способствуют поддержанию высокой степени декомпозиции и независимости компонентов, что улучшает модульность и масштабируемость системы. Рассмотрим работу этого алгоритма шаг за шагом. 1 Регистрация приемника сигнала, алгоритм начинается с регистрации функции create_text_document как приемника сигнала post_save модели Document. Это означает, что функция будет вызываться каждый раз после сохранения экземпляра Document, программная реализация представлена на рисунке 2.15. 2 Проверка, создан ли новый документ, чтение PDF-файла, инициализация переменной для хранения извлеченного текста. В функции create_text_docum- ent проверяется, создан ли новый экземпляр Document. Если это так (created равно True), то продолжается выполнение алгоритма. Используя библиотеку PdfReader, открывается и читается PDF-документ, связанный с экземпляром Document. Инициализируется переменная text_content, которая будет использоваться для накопления текста, извлеченного из PDF-документа. Программная реализация проверки, создан ли новый документ, чтение PDF-файла, инициализации переменной для хранения извлеченного текста представлена 2.16. новый документ, чтение PDF-файла, инициализации переменной для хранения извлеченного текста 3 Итерация по страницам PDF и извлечение текста. Алгоритм проходит по всем страницам PDF-документа, извлекая текст с каждой страницы и добавляя к переменной text_content. Программная реализация итерации по страницам PDF и извлечение текста представлена 2.17. PDF и извлечение текста 4 Создание и запись текстового файла. Создается имя текстового файла на основе имени документа. Затем создается и открывается файл для записи, и весь извлеченный текст записывается в этот файл. Программная реализация создания и записи текстового файла представлена 2.18. текстового файла представлена 5 Сохранение пути к текстовому файлу в экземпляр Document. Путь к новосозданному текстовому файлу сохраняется в поле txt_file экземпляра Document. После этого экземпляр сохраняется в базе данных. Программная реализация сохранения пути к текстовому файлу в экземпляр Document представлена 2.19. файлу в экземпляр Document Алгоритм извлечения текста из PDF и сохранения в текстовый файл позволяет автоматизировать процесс обработки загруженных документов в системе. Благодаря использованию сигналов Django, этот процесс выполняется автоматически сразу после создания нового экземпляра Document. Алгоритм включает чтение PDF-файла, извлечение текста с каждой страницы, создание текстового файла и обновление информации о документе в базе данных. Это обеспечивает эффективное управление и хранение текстового содержимого документов. Алгоритм проверки текста на оригинальность реализован на языке Python и предназначен для сравнения нового текста с уже существующими текстами в системе. Основные этапы алгоритма включают чтение текста, вычисление коэффициентов сходства, использование взвешенного среднего для учета различий в длине текстов, а также изменение статуса документа в зависимости от результатов проверки. Рассмотрим каждый шаг алгоритма более подробно. 1 Чтение нового текста. Алгоритм начинается с открытия файла, содержащего новый текст, и считывания содержимого в переменную new_text. Программная реализация чтения нового текста представлена на рисунке 2.20. 2 Получение всех текстов для сравнения. Из базы данных извлекаются текущего, который проверяется на все тексты, оригинальность. Это нужно для сравнения нового текста с уже существующими текстами в системе. Программная реализация получения всех текстов для сравнения представлена 2.21. за исключением 3 Инициализация переменных. Инициализируются переменные total_si milarity и total_weight, которые будут использоваться для накопления суммарного сходства и веса текстов соответственно. 4 Итерация по всем текстам и вычисление сходства. Открывается файл с текстом и считывается содержимое в переменную existing_text. Используется модуль SequenceMatcher для вычисления коэффициента сходства между новым текстом и текущим текстом. Коэффициент сходства (similarity_ratio) показывает, насколько два текста похожи друг на друга. Затем определяется вес на основе длины текущего текста и длины нового текста. Вес рассчитывается как отношение длины текущего текста к сумме длин текущего и нового текстов. Это позволяет учесть вклад каждого текста в общее сходство в зависимости от длины. Значения суммарного сходства (total_similarity) и суммарного веса (total_weight) обновляются с учетом вычисленного веса. Программная реализация итераций по всем текстам и вычисления сходства представлена 2.22. вычисления сходства 5 Вычисление среднего сходства и процента оригинальности. Если суммарный вес больше нуля, вычисляется среднее взвешенное сходство. Процент оригинальности определяется как 100% минус среднее сходство. Это позволяет понять, насколько новый текст отличается от существующих текстов. Чем выше процент оригинальности, тем менее текст похож на другие тексты в базе данных. Программная реализация вычисления среднего сходства и процента оригинальности представлена 2.23. процента оригинальности 6 Изменение статуса. После вычисления процента оригинальности алгоритм пытается изменить статус документа. Новый статус задается как статус с идентификатором 2 этот статус определяет документ как «проверенный». Если статус с таким идентификатором не найден в базе данных, это действие пропускается. Этот шаг позволяет изменить статус документа на основании результатов проверки оригинальности. Программная реализация изменения статуса представлена 2.24. Алгоритм проверки текста на оригинальность включает несколько ключевых этапов: чтение нового текста, получение текстов для сравнения, вычисление коэффициентов сходства с использованием взвешенного среднего, а также изменение статуса документа в зависимости от результата проверки. Этот подход позволяет эффективно оценить оригинальность нового текста, учитывая сходство с существующими текстами в системе и относительные размеры.

3.1 Ввод в эксплуатацию и обоснование минимальных технических 

требований к оборудованию Для размещения веб-сервиса в интернете необходимо выбрать платформу, на которой веб-сервис будет доступен для пользователей. Хостинг – сервис, который предоставляет серверное пространство и другие ресурсы для того, чтобы ваш веб-сайт был доступен онлайн [27]. Существует множество хостинг-провайдеров, каждый из которых предлагает свои услуги и особенности. Существуют различные хостинг-провайдеры, такие как: «Beget», «Holsinger», «SiteGround», «Bluehost». Hostinger предлагает доступные цены и широкий спектр функций, известные своими быстрыми серверами и простым в использовании интерфейсом. Однако, может быть ограничение на количество баз данных и доменов, что может быть недостатком для некоторых проектов [28]. SiteGround предлагает высокую производительность и превосходную поддержку, инструменты безопасности и управления сайтом также находятся на высоком уровне [29]. Bluehost предлагает надежный хостинг с хорошей скоростью и производительностью. Предоставляют бесплатный SSL-сертификат и доменное имя в течение первого года [30]. Beget обеспечивает удобное и относительно недорогое размещение веб- проектов. Кроме того, у Beget есть функция бесплатного использования для одного сайта, что может быть очень выгодно для студентов или начинающих разработчиков [31][32]. В данном случае используется услуга хостинга от Beget, предоставляющая возможность разместить бесплатно один сайт, одну базу данных и имеющая ограничения по объему памяти, так как Beget предлагает хорошее сочетание надежности, простоты использования и доступности. Кроме того, бесплатное использование для одного сайта делает хостинг привлекательным вариантом для тех, кто хочет сэкономить на размещении своих проектов в интернете. Процесс загрузки веб-сервиса на хостинг «Beget» начинается с прохождения регистрации, где пользователю необходимо указать свой номер телефона. После успешной регистрации на указанный номер приходят данные для авторизации: логин и пароль. Этот процесс обеспечивает безопасный доступ к панели управления хостингом и предоставляет пользователю возможность управлять своим веб-сервисом. Далее пользователь переходит на страницу авторизации, где вводит полученные учетные данные. При корректном вводе данных пользователь попадает в панель управления, представленную 3.1. На локальном устройстве архивируем все файлы курсового проекта и при помощи Файлового менеджера загружаем на сервер, предварительно удалив присутствующие файлы по умолчанию папке public. Пример загрузки файлов через файловый менеджер представлен 3.2. Далее нужно указать версии используемых языков программирования на хостинге, такие же, которые использовались в разработке, для совмещения версий. В случае успешной загрузки всех данных на хостинг веб-сервис откроется по выданной ссылке в левом меню блока. Для работы и внесения правок на сервере нужно зайти в раздел FTP и создать FTP-аккаунт, к которому можно подключиться через FileZilla или другое подобное программное средство для внесения изменений сразу на сервере. Пример создания FTP-аккаунта представлен 3.3. После установления соединения с FTP-сервером получаем доступ ко всем файлам, что позволяет вносить необходимые изменения в веб-сервис. Этот процесс обеспечивает удобный способ управления файлами на хостинге и позволяет осуществлять оперативное внесение изменений в веб-сервис. Пример подключения через FileZilla представлен 3.4. Обоснование минимальных технических требований к оборудованию для открытия верстки сайта основывается на нескольких ключевых аспектах: оборудование, способное обрабатывать HTML, CSS и другие веб-ресурсы без задержек. 1 Производительность: требуется открытия для Даже на начальном этапе проекта, пользователи ожидают быстрого и плавного отображения страниц сайта. 2 Ресурсы браузера: браузеры должны иметь достаточное количество ресурсов для загрузки и отображения верстки. Это включает в себя оперативную память, процессорное время и место для кэширования данных. 3 Совместимость и доступность: оборудование должно соответствовать требованиям современных браузеров и учитывать различные устройства и разрешения экранов, чтобы обеспечить правильное отображение верстки на всех платформах. 4 Быстродействие сети: для эффективной загрузки сайта необходима стабильная и быстрая сетевая связь, особенно в случае использования медиаконтента или внешних ресурсов. 5 Безопасность: оборудование должно быть защищено от возможных угроз, таких как вредоносные программы или атаки злоумышленников, чтобы обеспечить безопасность. Исходя из вышеприведенных аспектов, минимальные технические требования к оборудованию для открытия данного веб-сервиса могут включать в себя следующее: персональный компьютер или ноутбук i3 или современного поколения с процессором не ниже Intel Core аналогичным, оперативной памятью не менее 4 ГБ и достаточным объемом свободного места на диске для временного хранения данных. Также важна поддержка 3G, 4G, Wi-Fi для подключения к сети Интернет. Использование современного веб-браузера, такого как Google Chrome, Mozilla Firefox, Safari, Microsoft Edge, обеспечивающего оптимальное отображение и исполнение веб-страниц, также является важным аспектом. Стабильное интернет-соединение с минимальной скоростью загрузки и выгрузки данных обеспечит быструю загрузку верстки сайта и минимальные задержки при использовании веб-сервиса. Эти минимальные требования обеспечат возможность открытия веб- сервиса на устройствах пользователя с минимальными задержками и с учетом основных аспектов производительности и безопасности.

3.2 Руководство по эксплуатации программным средством 

Для открытия необходимо иметь устройство, которое имеет возможность выхода в сеть Интернет. Веб-сервис загружен на хостинг и открывается по общедоступной ссылке в сети интернет [33]. Рассмотрим руководство по эксплуатации программным средством в десктопной версии. В первую очередь, при проектировании пользовательского интерфейса, нужно создать грамотный экран «Авторизации». Экран «Авторизации» является лицом приложения, тот экран, с которым пользователь будет взаимодействовать в первую очередь. Должен сочетать в себя приятный интерфейс, который сможет понравиться пользователю, а также быть интуитивно понятен. Пример страницы «Авторизации» представлен на рисунке 3.5. При посещении веб-сервиса впервые или при возникновении проблем с входом, пользователь обнаружит информационный блок с подсказками о действиях в данной ситуации. В этом блоке будут представлены ссылки на сторонние ресурсы, где пользователь сможет получить дополнительную информацию или помощь по восстановлению логина или пароля. Кроме того, для удобства пользователей, предусмотрена функция отображения пароля в открытом виде. Нажав на специальную иконку в виде глаза, пользователь сможет сделать ввод пароля видимым, что облегчит процесс ввода и предотвратит возможные ошибки. После заполнения всех необходимых полей и нажатия кнопки «Войти», пользователь будет перенаправлен на страницу «Кабинета». Если в процессе входа возникнет какая-либо ошибка, пользователю немедленно будет показано сообщение о неверно заполненных полях. Кроме того, рядом с каждым полем будет расположена иконка, при наведении на которую пользователь сможет получить более подробную информацию об ошибке. Это поможет пользователям исправить ошибки быстро и без лишних усилий. Пример исключительной ситуации с подробным описанием ошибки и функционалом показа пароля представлен 3.6. функционалом показа пароля при авторизации Каждый пользователь, зайдя в систему получает доступ к навигационному меню в шапке веб-сервиса при наведении на иконку, для перехода между страницами или выхода из аккаунта нажав кнопку «Выйти». Также есть кликабельный логотип, который ведет на страницу «Кабинет». Пример навигационного меню показан 3.7. В разделе «Личный кабинет» пользователь может увидеть свое ФИО и адрес электронной почты. Однако, изменение личной информации невозможно, поскольку вся информация берется из репозитория БГУИР и автоматически загружается в систему. Это гарантирует актуальность и достоверность данных, а также предотвращает возможные ошибки или несоответствия в личной информации пользователя. Пример страницы «Личного кабинета» показан 3.8. После перехода на страницу «Роль пользователя» пользователь обнаружит, что данный функционал доступен только в режиме администратора, что гарантирует безопасность и контроль доступа к данным. Это важно для обеспечения конфиденциальности информации и предотвращения несанкционированного доступа к данным пользователей. Для удобства взаимодействия с этой страницей предусмотрено поле поиска по ФИО, которое облегчает быстрое нахождение нужной информации. Это особенно удобно в случае, когда необходимо быстро найти конкретного пользователя среди большого количества записей. Дополнительно, внизу страницы представлена пагинация, которая позволяет переходить между записями с информацией о пользователях, если на экране отображается более 10 пользователей одновременно. Это позволяет упорядочить вывод информации и обеспечить легкость навигации по большому объему данных. Пагинация делает процесс просмотра информации более удобным и эффективным. Основной контент страницы состоит из вывода информации о пользователях, номера, ФИО и роли. Такое представление данных упрощает восприятие информации и обеспечивает пользователям быстрый доступ к нужной информации, необходимой для управления ролями пользователей. Пример страницы «Роль пользователя» показан 3.9. При переходе на страницу «Кабинет» пользователь обнаружит удобное поле поиска по названию документа, что значительно облегчает процесс поиска конкретного документа среди имеющихся записей. Это особенно полезно в случаях, если большое количество документов усложняет поиск. Дополнительно, внизу страницы присутствует пагинация, которая позволяет переходить между записями с информацией о документах в случае, если на экране отображается более 10 документов одновременно. Такой подход упорядочивает информацию и обеспечивает удобство навигации по большому объему данных. На странице также присутствует информационный блок с подсказкой, который помогает пользователям быстро разобраться в функционале страницы и использовать весь функционал наиболее эффективно. Основной контент страницы представляет собой вывод информации о документах, включая их название, статус, дату загрузки на проверку, оригинальность и соответствующую кнопку действия. Статус документа может быть различным, включая «в очереди», «проверен», «не зачтен», «в защите» и «зачтен». Этот вывод информации помогает пользователям отслеживать статусы своих документов и оперативно реагировать на изменения. Дата, отображаемая рядом со статусом, равна дате загрузки документа на проверку, что позволяет пользователям ориентироваться в хронологии загрузки и обработки документов. Пример страницы «Кабинета» показан 3.10. Если же название документа слишком большое и не помещается в одну строку, обрезается и оканчивается троеточием, но для того чтобы увидеть полное название документа, нужно навести на название и на экране покажется блок с полным названием. Пример полного названия документа представлен 3.11. Нажимая на иконку троеточия у каждого документа, появляется выпадающее меню с выбором «Результаты» нажимая происходит скачивание результатов документа и кнопка «Отправить на проверку» для отправки документа на проверку. Пример клика на иконку троеточия показан 3.12. Нажимая на кнопку «Отправить на проверку» открывается модальное окно для подтверждения отправки документа на защиту. В данном модальном окне выводиться вопрос подтверждения действия и информация о документе, а также кнопка подтверждения отправки на проверку, нажимая на которую данный документ отправиться на проверку. Для того чтобы закрыть данное модальное окно, необходимо нажать на иконку крестика или же на область вне модального окна. Пример модального окна для отправки на проверку представлен 3.13. Для отправки нового документа на проверку в системе, пользователю достаточно выполнить простое действие: нажать на кнопку «Проверить документ», которая расположена рядом с полем поиска. После этого автоматически открывается модальное окно, предлагающее пользователю загрузить новый документ для последующей проверки. Пример модального окна для загрузки нового документа представлен 3.14. После нажатия кнопки «Проверить документ» и открытия модального окна, пользователю предоставляется возможность выбрать тип работы из выпадающего списка и указать название работы. Затем пользователь может загрузить документ, воспользовавшись кнопкой «Загрузить документ» или просто перетащив выбранный файл в область загрузки документа. Этот метод позволяет пользователям выбирать наиболее удобный способ загрузки и обеспечивает гибкость в использовании сервиса. Если выбранный документ оказывается не нужным, пользователь может удалить из формы, нажав на кнопку с крестиком рядом с ним. Это предотвращает возможные ошибки и обеспечивает пользователю контроль над загружаемыми файлами. После заполнения всех необходимых полей пользователь может нажать кнопку «Проверить», чтобы отправить документ на проверку. При этом модальное окно закроется автоматически. Кроме того, для закрытия модального окна пользователь может также нажать на кнопку с крестиком или на область вне модального окна. Это обеспечивает дополнительный способ управления процессом и повышает удобство использования, предоставляя пользователям свободу действий без лишних препятствий. Пример заполненной формы представлен 3.15. После перехода на страницу «Результаты» пользователь обнаружит удобное поле поиска по ФИО, что значительно облегчает поиск нужной информации среди имеющихся записей. Это поле поиска позволяет быстро фильтровать результаты и находить конкретные документы по заданному имени. Дополнительно, внизу страницы представлена пагинация, которая позволяет переходить между страницами с информацией о результатах документов. Особенно полезно в случае, если на экране отображается большое количество записей, и пользователю требуется легко навигировать по множеству данных. Пагинация способствует упорядочиванию вывода информации и обеспечивает удобство использования интерфейса. Основной контент страницы состоит из вывода информации о результатах документов. Каждая запись включает в себя название документа, текущий статус, дату загрузки на проверку, информацию об оригинальности и соответствующую кнопку действия. Статус документа может варьироваться от «зачтен» до «отправлен на доработку», что помогает пользователям отслеживать текущее состояние своих работ и оперативно реагировать на изменения. Дата, отображаемая рядом со статусом, соответствует дате загрузки документа на проверку. Это позволяет пользователям ориентироваться в хронологии загрузки и обработки документов, что особенно важно при работе с большим объемом информации. Пример страницы «Результаты» показан 3.16. При нажатии на иконку троеточия, которая представлена у каждого документа, пользователю открывается выпадающее меню с несколькими опциями. Одной из этих опций является «Результаты», при выборе которой происходит в формате PDF. Дополнительно, в выпадающем меню присутствует кнопка «Оценить». Нажатие открывает модальное окно, где пользователь может оставить оценку данной работы. результатов скачивание документа Пример клика на иконку троеточия показан 3.17. При нажатии на кнопку «Оценить» пользователю открывается модальное окно, предназначенное для оценки документа. В модальном окне пользователю предоставляется подтверждение для внесения окончательного решения о данном документе. Также в модальном окне отображается информация о выбранном документе, включая ФИО автора, название документа и оригинальность. Данный функционал помогает пользователям в принятии решений по оценке документов и обеспечивает дополнительную информацию для принятия обоснованных решений. Предоставление подтверждения перед окончательной оценкой помогает избежать случайных или нежелательных действий, что способствует точности и надежности оценки работ. Пример вывода модального окна показан 3.18. Также есть две кнопки «Отправить на доработку» и «Зачтен», при клике на кнопку «Отправить на доработку» документ отправляется на доработку и статус документа меняется на отрицательный. Статус документа после клика на кнопку «Отправить на доработку» показан 3.19. При клике на кнопку «Зачтен» статус документа меняется на положительный. Статус документа после клика на кнопку «Зачтен» показан на рисунке 3.20. После клика на кнопку «Зачтен» или же на кнопку «Отправить на доработку» модальное окно закрывается, также для того, чтобы закрыть модальное окно достаточно нажать на кнопку крестика или же на область вне модального окна. Также для мобильной версии предусмотрена кнопка скроллинга наверх страницы, для быстрого перехода в вверх страницы и любого положения. Пример кнопки скроллинга наверх показан 3.21. Таким образом, в данном разделе было представлено руководство по вводу в эксплуатацию и эксплуатации разработанного программного продукта.

ЗАКЛЮЧЕНИЕ 

В рамках данного проекта был разработан веб-сервис, предназначенный для автоматизации процесса проверки оригинальности различных научных и учебных работ студентов и преподавателей на основе репозитория БГУИР. Основной целью проекта было обеспечение возможности автоматизации проверки оригинальности работ с целью повышения эффективности и удобства процесса для пользователей. В процессе выполнения проекта были использованы принципы системного подхода, что позволило эффективно анализировать требования пользователей и реализовывать необходимый функционал. Был проведен анализ разработано общетехническое обоснование проекта, а также реализован механизм проверки оригинальности текстов. Особое внимание было уделено обработке ошибок и обеспечению корректной работы сервиса. пользователей веб-сервису, требований к Результатом работы стал разработанный веб-сервис, который позволяет загружать работы для проверки и получать детальные отчеты о проценте уникальности текста и о возможных источниках совпадений в репозитории БГУИР. Программное средство может быть использовано для создания аналогичных сервисов в образовательных учреждениях, что расширяет область применения. В процессе работы над проектом были учтены государственные стандарты и нормативные документы, а также использованы рекомендации СТП БГУИР 01–2017. Вся используемая информация была четко указана в «Списке использованных источников». Важным результатом проекта является создание удобного и эффективного инструмента для проверки оригинальности работ, что способствует повышению качества образования и научной работы. Однако, в дальнейшем планируется расширение функционала веб-сервиса. Планируется разработка дополнительных модулей для анализа содержания работ с использованием методов машинного обучения. Это поможет выявлять не только формальные признаки плагиата, но и структурные и семантические сходства, что повысит качество проверки оригинальности. Важным аспектом будет также улучшение интерфейса и пользовательского опыта. Планируется доработка дизайна и функциональности пользовательского интерфейса, с учетом обратной связи от пользователей и требований к удобству использования. Помимо этого, будет проведено тестирование и оптимизация производительности сервиса, чтобы обеспечить стабильную и эффективную работу при большой нагрузке и объеме данных. Таким образом, в будущем планируется значительное расширение функциональности и возможностей веб-сервиса для проверки оригинальности работ.